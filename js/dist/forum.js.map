{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/discussion-open-position/webpack/bootstrap","webpack://@clarkwinkelmann/discussion-open-position/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/discussion-open-position/webpack/runtime/define property getters","webpack://@clarkwinkelmann/discussion-open-position/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/discussion-open-position/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/components/Link']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/components/Select']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/components/FieldSet']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['forum/components/SettingsPage']\"","webpack://@clarkwinkelmann/discussion-open-position/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@clarkwinkelmann/discussion-open-position/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@clarkwinkelmann/discussion-open-position/./src/forum/components/AlertWithDismissCallback.ts","webpack://@clarkwinkelmann/discussion-open-position/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@clarkwinkelmann/discussion-open-position/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/FieldSet'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/SettingsPage'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","import Alert, {AlertAttrs} from 'flarum/common/components/Alert';\n\ninterface AlertWithDismissCallbackAttrs extends AlertAttrs {\n    // Flarum's ondismiss cannot be used by extensions since it's bound to AlertManagerState in AlertManager\n    ondismiss2?: Function\n}\n\nexport default class AlertWithDismissCallback extends Alert<AlertWithDismissCallbackAttrs> {\n    protected static initAttrs(attrs: AlertWithDismissCallbackAttrs) {\n        if (attrs.ondismiss2) {\n            const originalOnDismiss = attrs.ondismiss || (() => {\n            });\n\n            attrs.ondismiss = () => {\n                originalOnDismiss();\n                attrs.ondismiss2!();\n            };\n        }\n    }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport Button from 'flarum/common/components/Button';\nimport Link from 'flarum/common/components/Link';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Select from 'flarum/common/components/Select';\nimport FieldSet from 'flarum/common/components/FieldSet';\nimport icon from 'flarum/common/helpers/icon';\nimport Discussion from 'flarum/common/models/Discussion';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport SettingsPage from 'flarum/forum/components/SettingsPage';\nimport AlertWithDismissCallback from './components/AlertWithDismissCallback';\n\nfunction getOpenLastReadPreference() {\n    // Retrieve the user preference or the default\n    // For guests this will always be the default\n    return app.session.user?.preferences()?.discussionOpenLastRead || app.forum.attribute('discussionOpenLastReadDefault');\n}\n\napp.initializers.add('discussion-open-position', () => {\n    extend(DiscussionListItem.prototype, 'view', function (vdom) {\n        // If we are on a search results page, there's special logic to open the most relevant post\n        // We don't want to change that\n        // @ts-ignore\n        if (this.attrs.params.q) {\n            return;\n        }\n\n        const openLast = getOpenLastReadPreference();\n\n        // Since \"always\" is what Flarum does natively, don't try changing anything\n        if (openLast === 'always') {\n            return;\n        }\n\n        // @ts-ignore\n        const discussion = this.attrs.discussion as Discussion;\n\n        vdom.children.forEach(vdom => {\n            if (!vdom || !vdom.attrs || !vdom.attrs.className || vdom.attrs.className.indexOf('DiscussionListItem-content') === -1) {\n                return;\n            }\n\n            vdom.children.forEach(vdom => {\n                if (!vdom || vdom.tag !== Link) {\n                    return;\n                }\n\n                let jumpTo = 0;\n\n                if (openLast === 'unread' && discussion.isUnread()) {\n                    // Same logic as in DiscussionListItem to calculate open location\n                    jumpTo = Math.min(discussion.lastPostNumber(), (discussion.lastReadPostNumber() || 0) + 1);\n                }\n\n                vdom.attrs.href = app.route.discussion(discussion, jumpTo);\n            });\n        });\n    });\n\n    extend(DiscussionPage.prototype, 'show', function (returnValue, discussion) {\n        // Don't prompt guests to change their setting, they can't do it\n        if (!app.session.user) {\n            return;\n        }\n\n        // If option is disabled, skip\n        if (!app.forum.attribute('discussionOpenLastReadPrompt')) {\n            return;\n        }\n\n        // If the user already configured something, don't prompt them again\n        if (app.session.user.preferences()?.discussionOpenLastRead) {\n            return;\n        }\n\n        const defaultOpenLast = app.forum.attribute('discussionOpenLastReadDefault');\n\n        // Don't show any prompt when unread is the default, since it's a sensible balance already\n        if (defaultOpenLast === 'unread') {\n            return;\n        }\n\n        // If there are no replies, the user wouldn't understand the difference between the 2 options, so we'll not show the alert this time\n        if (discussion.replyCount() === 0) {\n            return;\n        }\n\n        const preference = defaultOpenLast === 'always' ? 'never' : 'always';\n\n        const controls = [\n            Button.component({\n                className: 'Button Button--link',\n                onclick: () => {\n                    app.session.user!.savePreferences({discussionOpenLastRead: preference}).then(() => {\n                        app.alerts.dismiss(alertId);\n                    });\n                },\n            }, app.translator.trans('clarkwinkelmann-discussion-open-position.forum.firstTimePrompt.openLastOptions.' + preference)),\n            LinkButton.component({\n                className: 'Button Button--link',\n                href: app.route('settings'), // Unfortunately there's no way to scroll to an anchor\n                onclick: () => {\n                    app.alerts.dismiss(alertId);\n                },\n            }, app.translator.trans('clarkwinkelmann-discussion-open-position.forum.firstTimePrompt.more'))\n        ];\n\n        const alertId = app.alerts.show(AlertWithDismissCallback, {\n            type: 'info',\n            controls,\n            ondismiss2: () => {\n                // Save the default as preference so the alert isn't shown again\n                app.session.user!.savePreferences({discussionOpenLastRead: defaultOpenLast});\n            },\n        }, app.translator.trans('clarkwinkelmann-discussion-open-position.forum.firstTimePrompt.from' + (defaultOpenLast === 'always' ? 'Always' : 'Never')));\n    });\n\n    extend(SettingsPage.prototype, 'settingsItems', function (items) {\n        const openLast = getOpenLastReadPreference();\n\n        items.add(\n            'discussionOpenLastRead',\n            FieldSet.component({\n                label: app.translator.trans('clarkwinkelmann-discussion-open-position.forum.preferences.discussionOpenLastRead'),\n                className: 'Settings-discussionOpenLastRead',\n            }, [\n                m('.Form-group', [\n                    Select.component({\n                        options: {\n                            always: app.translator.trans('clarkwinkelmann-discussion-open-position.forum.preferences.openLastOptions.always'),\n                            unread: app.translator.trans('clarkwinkelmann-discussion-open-position.forum.preferences.openLastOptions.unread'),\n                            never: app.translator.trans('clarkwinkelmann-discussion-open-position.forum.preferences.openLastOptions.never'),\n                        },\n                        value: openLast,\n                        onchange: (value) => {\n                            this.discussionOpenLastReadLoading = 'saving';\n\n                            this.user.savePreferences({discussionOpenLastRead: value}).then(() => {\n                                this.discussionOpenLastReadLoading = 'saved';\n                                m.redraw();\n\n                                setTimeout(() => {\n                                    this.discussionOpenLastReadLoading = null;\n                                    m.redraw();\n                                }, 2000);\n                            }).catch(error => {\n                                this.discussionOpenLastReadLoading = 'error';\n                                m.redraw();\n\n                                // Intentionally don't reset state after error\n\n                                throw error;\n                            });\n                        },\n                        disabled: this.discussionOpenLastReadLoading === 'saving',\n                    }, app.translator.trans('flarum-subscriptions.forum.settings.follow_after_reply_label')),\n                    this.discussionOpenLastReadLoading === 'saving' ? m('span.Settings-discussionOpenLastRead-state', LoadingIndicator.component({\n                        display: 'inline',\n                    })) : null,\n                    this.discussionOpenLastReadLoading === 'saved' ? m('span.Settings-discussionOpenLastRead-state.Settings-discussionOpenLastRead-saved', icon('fas fa-check')) : null,\n                    this.discussionOpenLastReadLoading === 'error' ? m('span.Settings-discussionOpenLastRead-state.Settings-discussionOpenLastRead-error', icon('fas fa-exclamation-circle')) : null,\n                ]),\n            ])\n        );\n    });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","AlertWithDismissCallback","subClass","superClass","create","constructor","initAttrs","attrs","ondismiss2","originalOnDismiss","ondismiss","Alert","getOpenLastReadPreference","app","preferences","discussionOpenLastRead","extend","DiscussionListItem","vdom","this","params","q","openLast","discussion","children","forEach","className","indexOf","tag","Link","jumpTo","isUnread","Math","min","lastPostNumber","lastReadPostNumber","href","DiscussionPage","returnValue","defaultOpenLast","replyCount","preference","controls","Button","onclick","then","alertId","LinkButton","type","SettingsPage","items","add","FieldSet","label","m","Select","options","always","unread","never","onchange","discussionOpenLastReadLoading","user","savePreferences","redraw","setTimeout","error","disabled","LoadingIndicator","display","icon"],"sourceRoot":""}